<?php

namespace App\Controller;

use App\Entity\DocMoteur;
use App\Entity\Moteur;
use App\Form\DocMoteurType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Exception;

/**
 * @Route("/doc/moteur")
 */
class DocMoteurController extends AbstractController
{

    /**
     * @Route("/new/{moteur}", name="doc_moteur_new", methods={"GET","POST"})
     * @param Moteur $moteur
     * @param Request $request
     * @param EntityManagerInterface $manager
     * @return Response
     * @throws Exception
     */
    public function new(Moteur $moteur,Request $request,EntityManagerInterface $manager): Response
    {
        $docMoteur = new DocMoteur();
        $form = $this->createForm(DocMoteurType::class, $docMoteur);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $docMoteur->setMoteur($moteur);
            $file = $docMoteur->getDocFilename();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtention();

            $file->move(
                $this->getParameter('upload_directory'),
                $fileName
            );
            $docMoteur->setDocFilename($fileName);
            $manager->persist($docMoteur);
            $manager->flush();

            return $this->redirectToRoute('home',['rubrique' => 'moteur']);
        }

        return $this->render('doc_moteur/new.html.twig', [
            'doc_moteur' => $docMoteur,
            'form' => $form->createView(),
        ]);
    }


    /**
     * @Route("/{id}/edit", name="doc_moteur_edit", methods={"GET","POST"})
     * @param Request $request
     * @param DocMoteur $docMoteur
     * @return Response
     */
    public function edit(Request $request, DocMoteur $docMoteur): Response
    {
        $form = $this->createForm(DocMoteurType::class, $docMoteur);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('home',['rubrique' => 'moteur']);
        }

        return $this->render('doc_moteur/edit.html.twig', [
            'doc_moteur' => $docMoteur,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="doc_moteur_delete", methods={"DELETE"})
     * @param Request $request
     * @param DocMoteur $docMoteur
     * @return Response
     */
    public function delete(Request $request, DocMoteur $docMoteur): Response
    {
        if ($this->isCsrfTokenValid('delete'.$docMoteur->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($docMoteur);
            $entityManager->flush();
        }

        return $this->redirectToRoute('home',['rubrique' => 'moteur']);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName(): string
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid('',true));
    }
}
